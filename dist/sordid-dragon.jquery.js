// jQuery the Sordid Dragon
// Copyright Poll Everywhere
// Paul Cortens, Mike Foley and Adam Heath
// https://github.com/polleverywhere/sordid-dragon
// Version 2.1.0

// Generated by CoffeeScript 1.10.0
(function($) {
  return $.fn.sordidDragon = function(command, options) {
    var $activePlaceholderChild, $ghost, $parent, $placeholder, attachDragOverHandler, calculatePositions, currentPosition, hideGhost, hidePlaceholder, isDragging, isTouch, moveChild, positions, showGhost, showPlaceholder;
    if (command == null) {
      command = "enable";
    }
    if (options == null) {
      options = {};
    }
    if (typeof command !== "string") {
      options = command;
    }
    $parent = this;
    isDragging = false;
    if ($.isFunction($parent.data("removeSordidDragon"))) {
      $parent.data("removeSordidDragon")();
    }
    $parent.data("removeSordidDragon", function() {
      isDragging = false;
      hidePlaceholder();
      return hideGhost();
    });
    $placeholder = null;
    $activePlaceholderChild = null;
    showPlaceholder = function($child) {
      $activePlaceholderChild = $child;
      $child.css({
        opacity: 0
      });
      if (!$placeholder.is(":visible")) {
        $placeholder.addClass("sordidDragon-placeholder");
        $child.after($placeholder);
        $placeholder.css({
          opacity: 0.5
        });
      }
      $child.hide();
      return $child.css({
        opacity: 1
      });
    };
    hidePlaceholder = function() {
      if ($placeholder != null ? $placeholder.is(":visible") : void 0) {
        $placeholder.after($activePlaceholderChild);
        $placeholder.off(".sordidDragon");
        $placeholder.remove();
        return $activePlaceholderChild.show();
      }
    };
    $ghost = null;
    showGhost = function(pageY) {
      if (!$ghost.is(":visible")) {
        $ghost.addClass("sordidDragon-ghost");
        $ghost.css({
          position: "fixed",
          opacity: 1
        });
        $parent.append($ghost);
      }
      return $ghost.css({
        left: $placeholder.offset().left,
        top: (pageY - ($placeholder.outerHeight() / 2)) - window.scrollY,
        width: $placeholder.outerWidth() - window.scrollX
      });
    };
    hideGhost = function() {
      return $ghost != null ? $ghost.remove() : void 0;
    };
    positions = null;
    calculatePositions = function() {
      positions = [];
      $parent.children(options.childSelector).each(function(_, child) {
        var $child;
        $child = $(child);
        return positions.push([$child.offset().top, $child.offset().top + $child.outerHeight()]);
      });
      return positions;
    };
    currentPosition = function(pageY) {
      var i, j, ref;
      for (i = j = 0, ref = positions.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (pageY >= positions[i][0] && pageY < positions[i][1]) {
          return i;
        }
      }
      return null;
    };
    moveChild = function($besideChild) {
      var $children, newPosition, oldPosition;
      $children = $parent.children((options.childSelector || "") + ":visible");
      newPosition = $children.index($besideChild);
      oldPosition = $children.index($placeholder);
      if (newPosition > oldPosition) {
        return $besideChild.after($placeholder);
      } else if (newPosition < oldPosition) {
        return $besideChild.before($placeholder);
      }
    };
    isTouch = function(e) {
      return /touch/.test(e.type);
    };
    attachDragOverHandler = function($el) {
      return $el.on("dragover.sordidDragon", function(e) {
        var ref;
        if (!isDragging) {
          return;
        }
        e.preventDefault();
        return (ref = e.originalEvent.dataTransfer) != null ? ref.dropEffect = "move" : void 0;
      });
    };
    return $parent.children(options.childSelector).each(function(_, child) {
      var $child, $handle;
      $child = $(child);
      $handle = options.handle ? $child.find(options.handle) : $child;
      $handle.attr("draggable", String(command !== "destroy"));
      $handle.off(".sordidDragon");
      $child.off(".sordidDragon");
      if (command === "destroy") {
        return;
      }
      $handle.on("touchstart.sordidDragon dragstart.sordidDragon", function(e) {
        var ref, ref1;
        if (isTouch(e)) {
          calculatePositions();
          $ghost = $child.clone();
          e.preventDefault();
        }
        if ((ref = e.originalEvent.dataTransfer) != null) {
          ref.effectAllowed = "move";
        }
        if ((ref1 = e.originalEvent.dataTransfer) != null) {
          ref1.setData("text", "");
        }
        $placeholder = $child.clone();
        attachDragOverHandler($placeholder);
        isDragging = true;
        return typeof options.sortStart === "function" ? options.sortStart(e, $child) : void 0;
      });
      $handle.on("touchmove.sordidDragon drag.sordidDragon", function(e) {
        var newPosition, pageY;
        if (!isDragging) {
          return;
        }
        showPlaceholder($child);
        if (isTouch(e)) {
          pageY = e.originalEvent.targetTouches[0].pageY;
          showGhost(pageY);
          newPosition = currentPosition(pageY);
          if (newPosition != null) {
            moveChild($parent.children((options.childSelector || "") + ":visible").eq(newPosition));
          }
          return e.preventDefault();
        }
      });
      $child.on("dragenter.sordidDragon", function(e) {
        if (!isDragging) {
          return;
        }
        return moveChild($child);
      });
      attachDragOverHandler($child);
      return $handle.on("touchend.sordidDragon dragend.sordidDragon", function(e) {
        if (!isDragging) {
          return;
        }
        hidePlaceholder($child);
        if (isTouch(e)) {
          hideGhost();
          calculatePositions();
          e.preventDefault();
        }
        if (typeof options.sortEnd === "function") {
          options.sortEnd(e, $child);
        }
        return isDragging = false;
      });
    });
  };
})(jQuery);
